package br.edu.ufca.chatbot_UFCA.bot;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;

import br.edu.ufca.chatbot_UFCA.downloader.PdfDownloader;
import br.edu.ufca.chatbot_UFCA.extractor.PdfExtractor;

public class Comandos {
	
	protected static String exibirComandos(String comando) {
		switch (comando) {
		case "/start":
			return "J√Å PODI ALMOSSAR?\n" + 
				"Ol√°! Eu sou o Al-mossar o bot do RU da UFCA! Aqui est√£o as op√ß√µes do que posso fazer:\n" + 
				"üçΩÔ∏è /cardapio - Ver o card√°pio do dia\n" + 
				"‚è∞ /horarios - Ver os hor√°rios que o RU est√° funcionando\n" + 
				"‚ÑπÔ∏è /sobre - Informa√ß√µes sobre este projeto\n" +
				"‚ùì /ajuda - Listar os comandos dispon√≠veis \n" +
				"üì≤ /contato - Entrar em contato com o criador";
		case "/cardapio":
			return obterCardapio(); 
		case "/horarios":
			return "Hor√°rios de funcionamento do Restaurante Universit√°rio da UFCA: \n" + 
					"‚òÄÔ∏è Almo√ßo: 11h - 14h (Juazeiro do Norte)\n" + 
					"üåë Jantar: 17h - 19h (Juazeiro do Norte)";
		case "/sobre":
			return "Este bot √© um projeto feito (de forma totalmente independente) por um aluno da UFCA. \n" +
					"Sua fun√ß√£o √© baixar o pdf no site oficial da institui√ß√£o e envia-lo, formatado em texto, para o usu√°rio aqui no Telegram.\n" +
					"Quaisquer erros s√£o ocasionados pela formata√ß√£o da tabela do pdf original. \n\n" +
					"Aqui o c√≥digo fonte do projeto: https://github.com/alexreisc/Almossar";
		case "/ajuda":
			return "Estes s√£o todos os comandos dispon√≠veis:\n" +
					"‚ñ∂Ô∏è /start - Iniciar o bot\n" +
					"üçΩÔ∏è /cardapio - Ver o card√°pio do dia\n" + 
					"‚è∞ /horarios - Ver os hor√°rios que o RU est√° funcionando\n" +
					"‚ÑπÔ∏è /sobre - Informa√ß√µes sobre este projeto\n" +
					"üì≤ /contato - Entrar em contato com o criador\n" +
					"‚ùì /ajuda - Listar os comandos dispon√≠veis";
		case "/contato":
			return "Este bot foi desenvolvido por Alex Reis. Se tiver d√∫vidas, sugest√µes de melhorias ou quer reportar um problema:\n" +
					"üì∑ Instagram: @c_alexreis \n" +
					"üìß Email: alex.reis@aluno.ufca.edu.br \n" + 
					"üåê Linkedin: https://linkedin.com/in/alex-reis-cavalcante \n";
		default:
			return "N√£o entendi, este comando. Digite '/ajuda' para listar os comandos dispon√≠veis.";
		}
	}
	
	public static String obterCardapio(){
		LocalDate hoje = LocalDate.now();
		int dia = hoje.getDayOfWeek().getValue();
		dia = 5; 
		if(dia > 5) {
			return "Sem card√°pio para hoje.";
		}
		
		int diaDoMes = hoje.getDayOfMonth();
		hoje.getDayOfWeek().toString();
		int mes = hoje.getMonthValue();
		int ano = hoje.getYear();
		
		try {
			PdfExtractor.extrairTextoDia(PdfDownloader.NOME_ARQUIVO, dia);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		String cabecalho = "Card√°pio de " + diaDoMes + "/" + mes + "/" + ano;
		
		StringBuilder refeicao = new StringBuilder();		
		
		boolean isAlmoco = LocalTime.now().getHour() < 14 ? true : false;
		if(!isAlmoco) {
			for(StringBuilder stringBuilder : PdfExtractor.jantarDoDia) {
				refeicao.append(stringBuilder.toString());
			}
			return cabecalho + "\nJantar\n" + refeicao.toString() + 
					"\n\n* Cont√©m leite/lactose/gl√∫ten\n" + 
					"OBS: O card√°pio pode sofrer altera√ß√µes.\n" +
					"(O CARDAPIO DO JANTAR √â DISPONIBILIZADO AQUI AP√ìS √ÄS 14:00 HORAS)";
		}
		for(StringBuilder stringBuilder : PdfExtractor.almocoDoDia) {
			refeicao.append(stringBuilder.toString());
		}
		return cabecalho + "\nAlmo√ßo\n" + refeicao.toString() + 
				"\n\n* Cont√©m leite/lactose/gl√∫ten\n" + 
				"OBS: O card√°pio pode sofrer altera√ß√µes.\n" +
				"(O CARDAPIO DO JANTAR √â DISPONIBILIZADO AQUI AP√ìS √ÄS 14:00 HORAS)";		
	}
}
